#!/bin/bash
# postinst script for percona-release
#
# see: dh_installdeb(1)
SUPRESSOR="> /dev/null 2>&1"
OLDREPOFILE="/etc/apt/sources.list.d/percona-release.list"

if [ "${PERCONA_DEBUG}" = "1" ]; then
  set -x
  SUPRESSOR=""
fi

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
      if [ -f /etc/default/percona-release ]; then
          . /etc/default/percona-release
      fi
      directory="/etc/apt/sources.list.d"

      for file in $(ls $directory/percona* 2>/dev/null); do
        if [[ ! $file == *.bak ]]; then
          # Skip files that contain 'signed-by='
          if grep -q 'signed-by=' "$file"; then
            echo "Skipping $file because it contains 'signed-by='"
            continue
          fi

          filename=$(basename "$file")
          IFS='-' read -r -a parts <<< "$filename"
          
          # Remove "percona-" prefix if present
          if [[ ${parts[0]} == "percona" ]]; then
            unset parts[0]
            parts=("${parts[@]}")
          fi
          
          # Process filename parts
          part_count=${#parts[@]}
          
          if [[ $part_count -ge 2 ]]; then
            repo_name="${parts[0]}"
            repo_type="${parts[1]}"
            
            # If there are more parts, append them to repo_name and repo_type accordingly
            if [[ $part_count -ge 3 ]]; then
              repo_name="${repo_name}-${parts[1]}"
              repo_type="${parts[2]}"
              
              if [[ $part_count -ge 4 ]]; then
                repo_name="${repo_name}-${parts[2]}"
                repo_type="${parts[3]}"
              fi
            fi
            
            # Remove file extension if present
            repo_type=${repo_type%.*}
            
            # Check for specific repo types and exclude them from repo_name
            case "$repo_type" in
              release|testing|experimental)
                percona-release enable-silent "$repo_name" "$repo_type"
                ;;
              *)
                echo "ERROR: Unknown component specification: $repo_type"
                ;;
            esac
          else
            echo "ERROR: Invalid filename format: $filename"
          fi
        fi
      done
      if [ "${REPOSITORIES}" == "" ]; then
          REPOSITORIES="prel telemetry"
      fi
      /usr/bin/percona-release enable prel release || true
      /usr/bin/percona-release enable telemetry release || true
      /usr/bin/percona-release enable pmm2-client release || true
      if [[ -f  ${OLDREPOFILE} ]]; then
        mv -f ${OLDREPOFILE} ${OLDREPOFILE}.bak
      fi
      for file in $(find /etc/apt/sources.list.d/ -mmin -3 -type f -iname "percona*.list.bak" -not -iname "*prel-release*"); do
        new_file=$(echo $file | sed 's/.bak//')
	      if [[ $new_file != ${OLDREPOFILE} ]]; then
          mv $file $new_file
        fi
      done

cat << EOF
The percona-release package now contains a percona-release script that can enable additional repositories for our newer products.

Note: currently there are no repositories that contain Percona products or distributions enabled. We recommend you to enable Percona Distribution repositories instead of individual product repositories, because with the Distribution you will get not only the database itself but also a set of other componets that will help you work with your database.

For example, to enable the Percona Distribution for MySQL 8.0 repository use:

  percona-release setup pdps8.0

Note: To avoid conflicts with older product versions, the percona-release setup command may disable our original repository for some products.

For more information, please visit:
  https://docs.percona.com/percona-software-repositories/percona-release.html

EOF
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
